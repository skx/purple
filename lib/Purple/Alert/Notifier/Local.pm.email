
=head1 NAME

Purple::Alert::Notifier::Local - Issue notifications for raised alerts.

=head1 SYNOPSIS

      use strict;
      use warnings;

      use Alert::Notifier::Local;

      my $tmp = Alert::Notifier::Local->new();
      $tmp->notify( $event );

=cut

=head1 DESCRIPTION

This module is responsible for issuing a notification upon a raised event,
and is invoked by the C<bin/notify> script if it can be successfully loaded.

If there is no L<Alert::Notifier::Local> module discovered at run-time then
the default notification method is merely to dump the alert to the console.

This module sends an email to C<root> with the details of any raised
alert.

=cut


=head1 METHODS

Now follows documentation on the available methods.

=cut

package Purple::Alert::Notifier::Local;

use Purple::Alerts;


=head2 new

Constructor.

No arguments are expected or used.

=cut

sub new
{
    my ( $class, %params ) = @_;
    my $self = {};
    bless( $self, $class );
    return $self;
}


=head2 notify

This method is invoked for each alert which is to be notified.

This sample module merely formats the alert into an email which is
sent to the unqualified recipient C<root>.

Parameters are:

=over 8

=item id
The ID of the alert, which can be used to fetch the details.

=item reason
A string describing whether this alert is being raised ("raise"), or whether the notification is old and is being re-raised ("reraise").

=back

=cut

sub notify
{
    my ( $self, $id, $reason ) = (@_);

    # Get the alert-data.
    my $tmp   = Purple::Alerts->new();
    my $event = $tmp->getEvent($id);

    #
    # We now have the alert-data, which is a hash.
    #
    # Keys include:
    #
    #    id
    #    raise
    #    subject
    #    detail
    #    source
    #


    #
    # Special case - only notify ONCE if the ID contains `once`.
    #
    # On initial notification we have `reason: raise`, on subsequent
    # notifications we have `reason: reraise`, so we can differentiate
    # them successfully.
    #
    return
      if ( ( $reason =~ /reraise/i ) && ( $event->{ 'id' } =~ /\.once/i ) );

    # Build up a subject of the email.
    my $subject = "$reason: [$event->{'id'}] - $event->{'subject'}";

    # Send an email to root.
    open( SENDMAIL, "|/usr/lib/sendmail -t" ) or return;

    print SENDMAIL <<EOF;
To: root
From: root
Subject: $subject
X-Purple: notification
X-IP: $event->{'source'}

$event->{'detail'}

EOF

    close(SENDMAIL);
}


1;
