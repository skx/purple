#!/usr/bin/perl -Ilib/

=head1 NAME

purple-alerter - Process our alerts

=cut

=head1 SYNOPSIS

  purple-alerter [options]


  Help Options:

    --help        Show the help information for this script.
    --verbose     Be more verbose in operation.

  Flags

    --period=N    Delay this many seconds between runs.
    --single      Execute only a single run.

=cut

=head1 ABOUT

This connects to the SQLite database and does the alerting:

 * If an event is in the `pending` state, and the `raise_time` is
  in the past then change the event-status to `raised` and
  sends the notification.

   > This ensures new alerts are sent to people.


 * If the alert has a `raise_time` in the future then it is cleared

   > This allows heartbeats to auto-clear when hosts return.


 * If an alert is in the raised state and the `notified_at` is
   more than a minute ago - update that field and re-alert.

   > This ensures that alerts are not ignored.


 * If the alert is in the `cleared` state, delete it.

   > This keeps our database state low.


 * If the alert is in the acknowldged state, ignore it.

   > This stops notifications from being repeated when you're aware of them.


=cut

=head1 LICENSE

This module is free software; you can redistribute it and/or modify it
under the terms of either:

a) the GNU General Public License as published by the Free Software
Foundation; either version 2, or (at your option) any later version,
or

b) the Perl "Artistic License".

=cut

=head1 AUTHOR

 Steve
 --
 http://www.steve.org.uk/

=cut

=head1 LICENSE

Copyright (c) 2016 by Steve Kemp.  All rights reserved.

This module is free software;
you can redistribute it and/or modify it under
the same terms as Perl itself.
The LICENSE file contains the full text of the license.

=cut


use strict;
use warnings;

use Purple::Alerts;
use Purple::Alert::Notifier;

use Getopt::Long;


#
#  Allow --verbose to be specified
#
my %CONFIG;
$CONFIG{ 'period' } = 60;

exit
  if (
       !GetOptions( "verbose",  \$CONFIG{ 'verbose' },
                    "single",   \$CONFIG{ 'single' },
                    "period=i", \$CONFIG{ 'period' } ) );



#
#  Create the helper.
#
my $alerter =
  Purple::Alert::Notifier->new( notify  => \&my_notify,
                                verbose => $CONFIG{ 'verbose' },
                                delay   => ( $CONFIG{ 'period' } - 1 ) );



#
#  Enter our notification loop.  We aim to run through it once
# every minute.
#
while (1)
{
    # Get the start-time of this loop
    my $start = time();

    # Reap cleared events.
    $alerter->reap();

    # Handle alerts which are in the future.
    $alerter->timewarp();

    # Notify on any new events which have reached their raise-time
    $alerter->notifyNew();

    #  If any alerts were last notified >60 seconds ago then renotify.
    $alerter->reNotify();

    # If we're running a single loop exit now.
    exit(0) if ( $CONFIG{ 'single' } );

    # How long did this loop take us?
    my $end  = time();
    my $diff = $end - $start;

    # If less than a minute pad ourselves
    if ( $diff < $CONFIG{ 'period' } )
    {
        my $delay = $CONFIG{ 'period' } - $diff;
        $CONFIG{ 'verbose' } && print "Sleeping for $delay seconds\n";
        sleep($delay);
    }

    # Round and round the merry-go-round.
}


# All done.
exit(0);



#
# Trigger the notification.
#
# If the user has created Alerts::Notifier::Local use that, otherwise
# merely dump to the console
#
sub my_notify
{
    my ( $id, $reason ) = (@_);

    #
    #  Has the user provided a Purple::Alert::Notifier::Local module?
    # if so use it.
    #
    my $test = "use Purple::Alert::Notifier::Local;";

    ## no critic (Eval)
    eval($test);
    ## use critic

    #
    #  If no errors, do the raise
    #
    if ( !$@ )
    {
        my $tmp = Purple::Alert::Notifier::Local->new();
        $tmp->notify( $id, $reason );
        return;
    }


    #
    #  The default alerting mechanism, which just dumps to the console.
    #
    print "Default notifier\n";

    #
    # Get the data associated with this alert.
    #
    my $tmp   = Purple::Alerts->new();
    my $event = $tmp->getEvent($id);

    #
    #  Show why we're being triggered.
    #
    if ( $reason =~ /^raise$/ )
    {
        print "Raising event $id\n";
    }
    elsif ( $reason =~ /^reraise$/i )
    {
        print "Re-raising event $id\n";
    }
    else
    {
        print "Unknown reason for notifying event $id - $reason\n";
    }


    #
    # Just dump the alert to the console
    #
    print "Subject: [$event->{'id'}] $event->{'subject'}\n";
    print "Source : $event->{'source'}\n";
    print "\n\t$event->{'detail'}\n\n";
}
